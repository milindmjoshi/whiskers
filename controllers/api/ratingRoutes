const router = require('express').Router();
const fs = require('fs');
const { Whisky, Rating, User, Admin } = require('../../models');
const withAuth = require('../../utils/auth');
const path = require('path');

const Sequelize = require('sequelize');


// Get all ratings for a user
// http://localhost:3001/api/ratings/user/5

router.get('/user/:id', async (req, res) => {
  //TODO - Add auth
  let id = req.params.id;
  console.log("Search for ratings for user " + id);
  try {
    // Search ratings  by  whiskey Id 
    const whiskeyRatingsData = await Rating.findAll({ where: { user_id: id } });

    if (whiskeyRatingsData) {
      // For now, just return the ratings array (will need to update to add the whiskey image)

      //   // first read the image and base64Encode the file IF image file name exists
      //   if (whiskeyData.file_name){
      //     console.log("Base 64 encode file");
      //     var imageAsBase64 = fs.readFileSync(path.join(__dirname,"../../public/assets/images/" + whiskeyData.file_name), 'base64');
      //     whiskeyData.image = imageAsBase64;
      //     console.log("Base 64 encoded file: " + whiskeyData.image);

      //   }
      res.status(200).json(JSON.stringify(whiskeyRatingsData));
    }
    else {
      res.status(404).send("Rating not Found for user  with id " + id);
    }
  } catch (error) {
    console.log(error);
    res.status(500).send("Error searching ratings by user id");
  }

})


// Get all ratings for a whiskey
// http://localhost:3001/api/ratings/whiskey/5

router.get('/whiskey/:id', async (req, res) => {
  //TODO - Add auth
  let id = req.params.id;
  console.log("Search ratings for whiskey id " + id);
  try {
    // Search ratings  by  whiskey Id 
    const whiskeyRatingsData = await Rating.findAll({ where: { whisky_id: id } });

    if (whiskeyRatingsData) {

      // For now, just return the ratings array (will need to update to add the whiskey image)

      //   // first read the image and base64Encode the file IF image file name exists
      //   if (whiskeyData.file_name){
      //     console.log("Base 64 encode file");
      //     var imageAsBase64 = fs.readFileSync(path.join(__dirname,"../../public/assets/images/" + whiskeyData.file_name), 'base64');
      //     whiskeyData.image = imageAsBase64;
      //     console.log("Base 64 encoded file: " + whiskeyData.image);

      //   }
      res.status(200).json(JSON.stringify(whiskeyRatingsData));
    }
    else {
      res.status(404).send("Rating not Found for Whiskey with id " + id);
    }
  } catch (error) {
    console.log(error);
    res.status(500).send("Error searching ratings by whiskey id");
  }

})

// Get all ratings  
// http://localhost:3001/api/ratings/whiskey/5

router.get('/', async (req, res) => {
  //TODO - Add auth
  let id = req.params.id;
  console.log("Get all ratings" + id);
  try {
    // Search ratings  by  whiskey Id 
    const whiskeyRatingsData = await Rating.findAll();

    if (whiskeyRatingsData) {

      // For now, just return the ratings array (will need to update to add the whiskey image)

      //   // first read the image and base64Encode the file IF image file name exists
      //   if (whiskeyData.file_name){
      //     console.log("Base 64 encode file");
      //     var imageAsBase64 = fs.readFileSync(path.join(__dirname,"../../public/assets/images/" + whiskeyData.file_name), 'base64');
      //     whiskeyData.image = imageAsBase64;
      //     console.log("Base 64 encoded file: " + whiskeyData.image);

      //   }
      res.status(200).json(JSON.stringify(whiskeyRatingsData));
    }
    else {
      res.status(404).send("Ratings not Found ");
    }
  } catch (error) {
    console.log(error);
    res.status(500).send("Error getting all ratings");
  }

})

// Update  Rating 
// http://localhost:3001/api/ratings/   (PUT)
//router.put('/', withAuth, async (req, res) => {
// TODO. Add auth
router.put('/', async (req, res) => {
  // sample body
  // {
  //   "id" : 3,
  //   "rating" : 4,
  //   "comment": "Best Whiskey in town update",
  // }
  try {
    // Search rating by pk 
    const id = req.body.id;
    const rating = await Rating.findByPk(id);
    if (rating) {
      console.log("Rating found for update");
      const ratingUpdatedData = await rating.update({ rating: req.body.rating, comment: req.body.comment },)
      if (ratingUpdatedData) {
        res.status(200).json(JSON.stringify(ratingUpdatedData));
      }
    }
    else {
      res.status(404).send("Rating not Found to update");
    }

  } catch (err) {
    console.log("Error updating rating");
    console.log(err);
    res.status(500).json(err);
  }
});


module.exports = router;
